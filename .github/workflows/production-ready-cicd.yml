# Multi-Environment Deployment Pipeline
name: Production Ready CI/CD

on:
  push:
    branches: [main, develop, feature/*]
    paths:
      - 'app/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'app/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        type: choice
        required: true
        default: 'staging'
        options: ['development', 'staging', 'production']
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        type: boolean
        default: false
      force_deploy:
        description: 'Force deploy even with test failures'
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-modules'

jobs:
  # Job 1: Smart change detection and environment routing
  setup-pipeline:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.decision.outputs.should-test }}
      should-build: ${{ steps.decision.outputs.should-build }}
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
      target-env: ${{ steps.decision.outputs.target-env }}
      deploy-strategy: ${{ steps.decision.outputs.deploy-strategy }}
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: 🎯 Smart pipeline decisions
      id: decision
      run: |
        echo "🎯 Making intelligent pipeline decisions..."
        
        # Determine deployment strategy based on trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual deployment triggered"
          echo "should-test=${{ !inputs.skip_tests }}" >> $GITHUB_OUTPUT
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "target-env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "deploy-strategy=manual" >> $GITHUB_OUTPUT
          
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Pull request - build and test only"
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "target-env=none" >> $GITHUB_OUTPUT
          echo "deploy-strategy=preview" >> $GITHUB_OUTPUT
          
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "Main branch - deploy to production"
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "target-env=production" >> $GITHUB_OUTPUT
          echo "deploy-strategy=blue-green" >> $GITHUB_OUTPUT
          
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "Develop branch - deploy to staging"
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "target-env=staging" >> $GITHUB_OUTPUT
          echo "deploy-strategy=rolling" >> $GITHUB_OUTPUT
          
        elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
          echo "Feature branch - build and test only"
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "target-env=preview" >> $GITHUB_OUTPUT
          echo "deploy-strategy=preview" >> $GITHUB_OUTPUT
        else
          echo "Unknown trigger - skip deployment"
          echo "should-test=true" >> $GITHUB_OUTPUT
          echo "should-build=false" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "target-env=none" >> $GITHUB_OUTPUT
          echo "deploy-strategy=none" >> $GITHUB_OUTPUT
        fi
    
    - name: 🔑 Generate cache key
      id: cache-key
      run: |
        HASH=$(sha256sum app/package-lock.json | cut -d' ' -f1)
        KEY="${{ env.CACHE_KEY_PREFIX }}-${{ env.NODE_VERSION }}-${HASH}"
        echo "key=${KEY}" >> $GITHUB_OUTPUT
        echo "📦 Cache key: ${KEY}"
    
    - name: 📋 Pipeline summary
      run: |
        echo "### 🎯 Pipeline Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Environment**: ${{ steps.decision.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Strategy**: ${{ steps.decision.outputs.deploy-strategy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Should Test**: ${{ steps.decision.outputs.should-test }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Should Build**: ${{ steps.decision.outputs.should-build }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Should Deploy**: ${{ steps.decision.outputs.should-deploy }}" >> $GITHUB_STEP_SUMMARY

  # Job 2: Advanced testing with parallel strategies
  test-suite:
    needs: setup-pipeline
    if: needs.setup-pipeline.outputs.should-test == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        test-type: [unit, integration, lint]
        include:
          - test-type: unit
            command: "test:coverage"
            artifact: "coverage-report"
          - test-type: integration
            command: "test:ci"
            artifact: "test-results"
          - test-type: lint
            command: "lint"
            artifact: "lint-report"
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'app/package-lock.json'
    
    - name: 📦 Install dependencies with cache
      working-directory: ./app
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci --prefer-offline --no-audit --progress=false
        else
          npm install --prefer-offline --no-audit --progress=false
        fi
    
    - name: 🧪 Run ${{ matrix.test-type }} tests
      id: test
      working-directory: ./app
      run: |
        echo "🧪 Running ${{ matrix.test-type }} tests..."
        
        case "${{ matrix.test-type }}" in
          "unit")
            npm run ${{ matrix.command }} || exit 1
            echo "✅ Unit tests completed with coverage"
            ;;
          "integration")
            # Simular tests de integración más complejos
            echo "🔗 Setting up integration test environment..."
            npm run ${{ matrix.command }} || exit 1
            echo "✅ Integration tests completed"
            ;;
          "lint")
            echo "🔍 Running code quality checks..."
            npm run ${{ matrix.command }} || exit 1
            echo "✅ Linting completed"
            ;;
        esac
      continue-on-error: false
    
    - name: 📊 Generate test report
      if: always()
      working-directory: ./app
      run: |
        mkdir -p reports
        echo "### 🧪 ${{ matrix.test-type }} Test Results" > reports/test-summary.md
        echo "- **Status**: ${{ steps.test.outcome }}" >> reports/test-summary.md
        echo "- **Timestamp**: $(date)" >> reports/test-summary.md
        echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> reports/test-summary.md
        
        if [ "${{ matrix.test-type }}" = "unit" ] && [ -d "coverage" ]; then
          echo "- **Coverage**: Available in artifacts" >> reports/test-summary.md
        fi
    
    - name: 📤 Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}-${{ github.run_id }}
        path: |
          app/coverage/
          app/reports/
          app/test-results/
        retention-days: 7

  # Job 3: Multi-stage build with optimization
  build-optimized:
    needs: [setup-pipeline, test-suite]
    if: |
      always() &&
      needs.setup-pipeline.outputs.should-build == 'true' &&
      (needs.test-suite.result == 'success' || inputs.force_deploy == true)
    runs-on: ubuntu-latest
    
    outputs:
      build-hash: ${{ steps.build-info.outputs.hash }}
      build-size: ${{ steps.build-info.outputs.size }}
      build-time: ${{ steps.build-info.outputs.time }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'app/package-lock.json'
    
    - name: 📦 Install dependencies
      working-directory: ./app
      run: npm ci --prefer-offline --no-audit
    
    - name: 🔧 Configure build environment
      working-directory: ./app
      run: |
        echo "🔧 Configuring build for ${{ needs.setup-pipeline.outputs.target-env }}"
        
        # Create environment-specific configuration
        cat > .env.production << EOF
        REACT_APP_ENV=${{ needs.setup-pipeline.outputs.target-env }}
        REACT_APP_VERSION=${{ github.sha }}
        REACT_APP_BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        REACT_APP_COMMIT_HASH=${{ github.sha }}
        REACT_APP_BRANCH=${{ github.ref_name }}
        REACT_APP_DEPLOY_STRATEGY=${{ needs.setup-pipeline.outputs.deploy-strategy }}
        EOF
        
        # Environment-specific configurations
        case "${{ needs.setup-pipeline.outputs.target-env }}" in
          "production")
            echo "REACT_APP_API_URL=https://api.comic-story.com" >> .env.production
            echo "REACT_APP_ANALYTICS_ENABLED=true" >> .env.production
            ;;
          "staging")
            echo "REACT_APP_API_URL=https://staging-api.comic-story.com" >> .env.production
            echo "REACT_APP_ANALYTICS_ENABLED=false" >> .env.production
            ;;
          "development"|"preview")
            echo "REACT_APP_API_URL=https://dev-api.comic-story.com" >> .env.production
            echo "REACT_APP_DEBUG_MODE=true" >> .env.production
            ;;
        esac
        
        echo "✅ Environment configuration completed"
    
    - name: 🏗️ Build with optimizations
      id: build
      working-directory: ./app
      run: |
        BUILD_START=$(date +%s)
        echo "🏗️ Starting optimized build..."
        
        # Production build with optimizations
        if [ "${{ needs.setup-pipeline.outputs.target-env }}" = "production" ]; then
          echo "🚀 Production build with maximum optimizations"
          CI=true npm run build:prod
        else
          echo "⚡ Standard build for ${{ needs.setup-pipeline.outputs.target-env }}"
          CI=true npm run build
        fi
        
        BUILD_END=$(date +%s)
        BUILD_TIME=$((BUILD_END - BUILD_START))
        
        echo "build-time=${BUILD_TIME}s" >> $GITHUB_OUTPUT
        echo "✅ Build completed in ${BUILD_TIME}s"
    
    - name: 📊 Build analysis and optimization
      id: build-info
      working-directory: ./app
      run: |
        echo "📊 Analyzing build output..."
        
        # Calculate build size
        BUILD_SIZE=$(du -sh build 2>/dev/null | cut -f1 || echo "unknown")
        echo "build-size=${BUILD_SIZE}" >> $GITHUB_OUTPUT
        
        # Generate build hash for cache busting
        BUILD_HASH=$(find build -type f -exec sha256sum {} \; | sha256sum | cut -d' ' -f1 | head -c 8)
        echo "build-hash=${BUILD_HASH}" >> $GITHUB_OUTPUT
        
        echo "📏 Build size: ${BUILD_SIZE}"
        echo "🔑 Build hash: ${BUILD_HASH}"
        
        # Detailed build analysis
        if [ -d "build" ]; then
          echo "### 📊 Build Analysis" > build-report.md
          echo "- **Size**: ${BUILD_SIZE}" >> build-report.md
          echo "- **Hash**: ${BUILD_HASH}" >> build-report.md
          echo "- **JS Files**: $(find build/static/js -name '*.js' 2>/dev/null | wc -l)" >> build-report.md
          echo "- **CSS Files**: $(find build/static/css -name '*.css' 2>/dev/null | wc -l)" >> build-report.md
          echo "- **Assets**: $(find build -type f | wc -l)" >> build-report.md
          echo "- **Build Time**: ${{ steps.build.outputs.build-time }}" >> build-report.md
        fi
    
    - name: 🧹 Post-build optimizations
      working-directory: ./app
      run: |
        if [ -d "build" ]; then
          echo "🧹 Applying post-build optimizations..."
          
          # Generate gzip versions for better compression
          find build/static -name "*.js" -exec gzip -k {} \;
          find build/static -name "*.css" -exec gzip -k {} \; 2>/dev/null || true
          
          # Create file manifest for deployment
          find build -type f | sort > build/file-manifest.txt
          
          # Add build metadata
          cat > build/build-info.json << EOF
          {
            "version": "${{ github.sha }}",
            "environment": "${{ needs.setup-pipeline.outputs.target-env }}",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}",
            "hash": "${{ steps.build-info.outputs.build-hash }}",
            "size": "${{ steps.build-info.outputs.build-size }}",
            "deployStrategy": "${{ needs.setup-pipeline.outputs.deploy-strategy }}"
          }
          EOF
          
          echo "✅ Post-build optimizations completed"
        fi
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ needs.setup-pipeline.outputs.target-env }}-${{ github.run_id }}
        path: app/build/
        retention-days: 14
    
    - name: 📈 Build summary
      run: |
        echo "### 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.setup-pipeline.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ steps.build-info.outputs.build-size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: ${{ steps.build.outputs.build-time }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Hash**: ${{ steps.build-info.outputs.build-hash }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Smart deployment with multiple providers
  deploy-smart:
    needs: [setup-pipeline, test-suite, build-optimized]
    if: |
      always() &&
      needs.setup-pipeline.outputs.should-deploy == 'true' &&
      needs.build-optimized.result == 'success'
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ needs.setup-pipeline.outputs.target-env }}
      url: ${{ steps.deploy.outputs.url }}
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-time: ${{ steps.deploy.outputs.time }}
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ needs.setup-pipeline.outputs.target-env }}-${{ github.run_id }}
        path: ./build
    
    - name: 🚀 Smart deployment
      id: deploy
      run: |
        DEPLOY_START=$(date +%s)
        echo "🚀 Starting smart deployment to ${{ needs.setup-pipeline.outputs.target-env }}"
        echo "📦 Build hash: ${{ needs.build-optimized.outputs.build-hash }}"
        echo "🎯 Strategy: ${{ needs.setup-pipeline.outputs.deploy-strategy }}"
        
        # Simulate deployment to different providers based on environment
        case "${{ needs.setup-pipeline.outputs.target-env }}" in
          "production")
            echo "🌐 Deploying to production (Vercel/Netlify)"
            sleep 8
            DEPLOY_URL="https://comic-story.com"
            ;;
          "staging")
            echo "🔧 Deploying to staging (Netlify)"
            sleep 5
            DEPLOY_URL="https://staging-comic-story.netlify.app"
            ;;
          "development")
            echo "🛠️ Deploying to development (Heroku)"
            sleep 3
            DEPLOY_URL="https://dev-comic-story.herokuapp.com"
            ;;
          "preview")
            echo "👀 Creating preview deployment"
            sleep 2
            DEPLOY_URL="https://preview-${{ github.run_id }}-comic-story.netlify.app"
            ;;
        esac
        
        DEPLOY_END=$(date +%s)
        DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
        
        echo "url=${DEPLOY_URL}" >> $GITHUB_OUTPUT
        echo "time=${DEPLOY_TIME}s" >> $GITHUB_OUTPUT
        
        echo "✅ Deployment completed in ${DEPLOY_TIME}s"
        echo "🌐 Available at: ${DEPLOY_URL}"
    
    - name: 🔍 Post-deployment verification
      run: |
        echo "🔍 Running post-deployment verification..."
        DEPLOY_URL="${{ steps.deploy.outputs.url }}"
        
        # Simulate health checks
        echo "⚡ Running health checks..."
        sleep 3
        echo "✅ Health check: OK"
        
        echo "🔒 Verifying security headers..."
        sleep 2
        echo "✅ Security headers: OK"
        
        echo "⚡ Performance check..."
        sleep 2
        echo "✅ Performance: Good (simulated Lighthouse score: 95/100)"
        
        echo "🔍 All post-deployment checks passed!"
    
    - name: 📊 Deployment summary
      run: |
        echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.setup-pipeline.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Strategy**: ${{ needs.setup-pipeline.outputs.deploy-strategy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Time**: ${{ steps.deploy.outputs.time }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Hash**: ${{ needs.build-optimized.outputs.build-hash }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Job 5: Advanced notifications and metrics
  notify-and-metrics:
    needs: [setup-pipeline, test-suite, build-optimized, deploy-smart]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 📊 Collect pipeline metrics
      id: metrics
      run: |
        echo "📊 Collecting comprehensive pipeline metrics..."
        
        # Calculate overall pipeline success
        if [ "${{ needs.deploy-smart.result }}" = "success" ]; then
          PIPELINE_STATUS="success"
          STATUS_EMOJI="✅"
        else
          PIPELINE_STATUS="failed"
          STATUS_EMOJI="❌"
        fi
        
        echo "status=${PIPELINE_STATUS}" >> $GITHUB_OUTPUT
        echo "emoji=${STATUS_EMOJI}" >> $GITHUB_OUTPUT
        
        # Generate metrics payload
        cat > pipeline-metrics.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "pipeline_id": "${{ github.run_id }}",
          "repository": "${{ github.repository }}",
          "branch": "${{ github.ref_name }}",
          "commit": "${{ github.sha }}",
          "environment": "${{ needs.setup-pipeline.outputs.target-env }}",
          "trigger": "${{ github.event_name }}",
          "status": "${PIPELINE_STATUS}",
          "deploy_url": "${{ needs.deploy-smart.outputs.deployment-url }}",
          "build_time": "${{ needs.build-optimized.outputs.build-time }}",
          "deploy_time": "${{ needs.deploy-smart.outputs.deployment-time }}",
          "build_size": "${{ needs.build-optimized.outputs.build-size }}",
          "test_results": {
            "status": "${{ needs.test-suite.result }}",
            "coverage_available": true
          }
        }
        EOF
        
        echo "📈 Metrics collected successfully"
    
    - name: 📬 Smart notifications
      run: |
        echo "📬 Sending smart notifications..."
        
        STATUS="${{ steps.metrics.outputs.status }}"
        EMOJI="${{ steps.metrics.outputs.emoji }}"
        ENV="${{ needs.setup-pipeline.outputs.target-env }}"
        
        echo "${EMOJI} Pipeline Status: ${STATUS}"
        echo "🎯 Environment: ${ENV}"
        echo "🌐 URL: ${{ needs.deploy-smart.outputs.deployment-url }}"
        echo "📊 Build Size: ${{ needs.build-optimized.outputs.build-size }}"
        echo "⏱️ Total Time: Build(${{ needs.build-optimized.outputs.build-time }}) + Deploy(${{ needs.deploy-smart.outputs.deployment-time }})"
        
        # Different notification strategies based on environment
        if [ "${ENV}" = "production" ]; then
          echo "🚨 Production deployment notification sent to #releases"
          echo "📧 Stakeholder emails sent"
          echo "📊 Monitoring dashboards updated"
        elif [ "${ENV}" = "staging" ]; then
          echo "🔧 Staging deployment notification sent to #dev-team"
          echo "🧪 QA team notified for testing"
        else
          echo "💬 Development deployment notification sent to #dev-updates"
        fi
    
    - name: 📈 Final pipeline report
      run: |
        echo "### 📋 Complete Pipeline Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 🎯 Overview" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.metrics.outputs.emoji }} ${{ steps.metrics.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.setup-pipeline.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Strategy**: ${{ needs.setup-pipeline.outputs.deploy-strategy }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }} on ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Suite**: ${{ needs.test-suite.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.build-optimized.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ needs.build-optimized.outputs.build-size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: ${{ needs.build-optimized.outputs.build-time }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Hash**: ${{ needs.build-optimized.outputs.build-hash }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### 🚀 Deployment Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.deploy-smart.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ needs.deploy-smart.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: ${{ needs.deploy-smart.outputs.deployment-time }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
