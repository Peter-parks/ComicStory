name: Multi-Environment CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        type: choice
        required: true
        options: ['development', 'staging', 'production']
      skip_tests:
        description: 'Skip tests'
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment even if tests fail'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/comic-app

jobs:
  # Job 1: Validación de pre-requisitos
  validate:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.validate.outputs.environment }}
      can-deploy: ${{ steps.validate.outputs.can-deploy }}
      deploy-url: ${{ steps.validate.outputs.deploy-url }}
    
    steps:
    - name: 🔍 Validate deployment request
      id: validate
      run: |
        echo "🎯 Validating deployment to ${{ inputs.environment }}"
        
        # Validaciones por environment
        case "${{ inputs.environment }}" in
          "development")
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-url=https://dev-comic-app.herokuapp.com" >> $GITHUB_OUTPUT
            ;;
          "staging")
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-url=https://staging-comic-app.netlify.app" >> $GITHUB_OUTPUT
            ;;
          "production")
            # Production requiere aprobación manual (definido en environment)
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            echo "deploy-url=https://comic-app.vercel.app" >> $GITHUB_OUTPUT
            ;;
        esac
        
        echo "✅ Validation completed"

  # Job 2: Build y containerización
  build:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'app/package-lock.json'
    
    - name: 📦 Install dependencies
      working-directory: ./app
      run: npm ci
    
    - name: 🏗️ Build application
      working-directory: ./app
      env:
        REACT_APP_ENV: ${{ needs.validate.outputs.environment }}
        REACT_APP_VERSION: ${{ github.sha }}
        CI: true
      run: |
        echo "Building for environment: ${{ needs.validate.outputs.environment }}"
        npm run build
    
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=${{ needs.validate.outputs.environment }}-latest
    
    - name: 📋 Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        
        # Copiar archivos build
        COPY app/build /usr/share/nginx/html
        
        # Configuración nginx personalizada
        COPY nginx.conf /etc/nginx/nginx.conf
        
        # Metadata
        LABEL org.opencontainers.image.source="https://github.com/${{ github.repository }}"
        LABEL org.opencontainers.image.description="Comic App - ${{ needs.validate.outputs.environment }}"
        LABEL org.opencontainers.image.created="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        EXPOSE 80
        
        CMD ["nginx", "-g", "daemon off;"]
        EOF
    
    - name: 📋 Create nginx config
      run: |
        cat > nginx.conf << 'EOF'
        events {
            worker_connections 1024;
        }
        
        http {
            include       /etc/nginx/mime.types;
            default_type  application/octet-stream;
            
            sendfile        on;
            keepalive_timeout  65;
            
            server {
                listen       80;
                server_name  localhost;
                
                location / {
                    root   /usr/share/nginx/html;
                    index  index.html index.htm;
                    try_files $uri $uri/ /index.html;
                }
                
                # Health check endpoint
                location /health {
                    access_log off;
                    return 200 "healthy\n";
                    add_header Content-Type text/plain;
                }
                
                error_page   500 502 503 504  /50x.html;
                location = /50x.html {
                    root   /usr/share/nginx/html;
                }
            }
        }
        EOF
    
    - name: 🔨 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📄 Generate build report
      run: |
        echo "### 🏗️ Build Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tags**: " >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.meta.outputs.tags }}' | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

  # Job 3: Tests de integración
  integration-tests:
    needs: [validate, build]
    if: ${{ !inputs.skip_tests }}
    runs-on: ubuntu-latest
    
    services:
      app:
        image: ${{ needs.build.outputs.image-tag }}
        ports:
          - 3000:80
    
    steps:
    - name: 📥 Checkout for tests
      uses: actions/checkout@v4
    
    - name: ⏳ Wait for service
      run: |
        echo "Waiting for application to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health; then
            echo "✅ Application is ready!"
            break
          fi
          echo "⏳ Attempt $i/30 - waiting..."
          sleep 2
        done
    
    - name: 🧪 Run smoke tests
      run: |
        echo "🔍 Running smoke tests..."
        
        # Test home page
        if curl -f http://localhost:3000/; then
          echo "✅ Home page loads"
        else
          echo "❌ Home page failed"
          exit 1
        fi
        
        # Test health endpoint
        if curl -f http://localhost:3000/health | grep -q "healthy"; then
          echo "✅ Health check passes"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        echo "🎉 All smoke tests passed!"

  # Job 4: Security scanning
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Security Summary
      run: |
        echo "### 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Completed" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deployment
  deploy:
    needs: [validate, build, integration-tests, security-scan]
    if: |
      always() && 
      needs.validate.outputs.can-deploy == 'true' &&
      needs.build.result == 'success' &&
      (
        needs.integration-tests.result == 'success' || 
        needs.integration-tests.result == 'skipped' || 
        inputs.force_deploy == true
      )
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ inputs.environment }}
      url: ${{ needs.validate.outputs.deploy-url }}
    
    steps:
    - name: 🚀 Deploy to ${{ inputs.environment }}
      run: |
        echo "🚀 Starting deployment to ${{ inputs.environment }}"
        echo "📦 Image: ${{ needs.build.outputs.image-tag }}"
        echo "🌐 URL: ${{ needs.validate.outputs.deploy-url }}"
        
        # Simular deployment steps
        echo "⏳ Pulling latest image..."
        sleep 2
        
        echo "⏳ Stopping previous version..."
        sleep 1
        
        echo "⏳ Starting new version..."
        sleep 2
        
        echo "⏳ Running health checks..."
        sleep 1
        
        echo "✅ Deployment completed successfully!"
    
    - name: 🔍 Post-deployment verification
      run: |
        echo "🔍 Verifying deployment..."
        
        # Simular verificación
        sleep 2
        
        echo "✅ All post-deployment checks passed!"
    
    - name: 📈 Deployment metrics
      run: |
        echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ needs.validate.outputs.deploy-url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # Job 6: Rollback capability
  rollback:
    needs: [validate, deploy]
    if: failure() && needs.deploy.result == 'failure'
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Automatic rollback
      run: |
        echo "❌ Deployment failed, initiating rollback..."
        echo "🔄 Rolling back to previous version..."
        sleep 3
        echo "✅ Rollback completed"
        
        echo "### 🔄 Rollback Executed" >> $GITHUB_STEP_SUMMARY
        echo "- **Reason**: Deployment failure" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Rollback successful" >> $GITHUB_STEP_SUMMARY

  # Job 7: Notification
  notify:
    needs: [validate, build, deploy, rollback]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 📬 Send deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ Deployment to ${{ inputs.environment }} was successful!"
          echo "🌐 Application URL: ${{ needs.validate.outputs.deploy-url }}"
        elif [ "${{ needs.rollback.result }}" = "success" ]; then
          echo "⚠️ Deployment failed but rollback was successful"
        else
          echo "❌ Deployment to ${{ inputs.environment }} failed!"
        fi
        
        echo "### 📋 Final Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Overall**: $([ "${{ needs.deploy.result }}" = "success" ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
